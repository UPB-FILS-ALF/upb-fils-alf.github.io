"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1796],{5568:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/09_wat2wasm-b4f3b1c79067305211907e41b48e7836.png"},7067:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=s(4848),t=s(8453);const r={sidebar_position:10,description:"Cible portable de compilation",slug:"/tp/09"},l="09 -  WebAssembly",o={id:"tp/09/index",title:"09 -  WebAssembly",description:"Cible portable de compilation",source:"@site/versioned_docs/version-2024/tp/09/index.md",sourceDirName:"tp/09",slug:"/tp/09",permalink:"/docs/2024/tp/09",draft:!1,unlisted:!1,editUrl:"https://github.com/UPB-FILS-alf/upb-fils-alf.github.io/edit/main/versioned_docs/version-2024/tp/09/index.md",tags:[],version:"2024",sidebarPosition:10,frontMatter:{sidebar_position:10,description:"Cible portable de compilation",slug:"/tp/09"},sidebar:"tutorialSidebar",previous:{title:"08 - G\xe9n\xe9ration de code",permalink:"/docs/2024/tp/08"},next:{title:"Devoir",permalink:"/docs/2024/category/devoir"}},a={},c=[{value:"WAT vs WASM",id:"wat-vs-wasm",level:2},{value:"Structure et instructions",id:"structure-et-instructions",level:2},{value:"Modules",id:"modules",level:3},{value:"Types",id:"types",level:3},{value:"Variables",id:"variables",level:3},{value:"Ajouter des valeurs \xe0 la pile",id:"ajouter-des-valeurs-\xe0-la-pile",level:3},{value:"Op\xe9rations arithm\xe9tiques",id:"op\xe9rations-arithm\xe9tiques",level:3},{value:"Contr\xf4le du flux",id:"contr\xf4le-du-flux",level:3},{value:"Fonctions",id:"fonctions",level:3},{value:"Importer des fonctions",id:"importer-des-fonctions",level:2},{value:"Exercices",id:"exercices",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"09----webassembly",children:"09 -  WebAssembly"}),"\n",(0,i.jsx)(n.p,{children:"Web Assembly (WASM) est un format binaire d\u2019instructions pour une machine \xe0 pile infinie. Comme tout autre format de langage d\u2019assemblage, WASM est du code g\xe9n\xe9r\xe9 par un compilateur. Son plus grand avantage est qu\u2019il peut \xeatre ex\xe9cut\xe9 dans le navigateur, en utilisant JavaScript. Il y a d\xe9j\xe0 beaucoup de langages de programmation qui peuvent \xeatre compil\xe9s ayant WASM comme code cible (target)."}),"\n",(0,i.jsx)(n.p,{children:"On arrive, donc, au moment qu\u2019on peut \xe9crire des programmes dans des langages de programmation compl\xe8xes, comme Rust, C ou m\xeame Kotlin et, ensuite, les ex\xe9cuter dans le navigateur en tant que code compil\xe9 dans WASM."}),"\n",(0,i.jsx)(n.p,{children:"D\xe8s nos jours, beaucoup d\u2019autres langages de programmation ont introduit la possibilit\xe9 d\u2019ex\xe9cution des modules de WASM."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Le succ\xe8s de WASM est assez similaire au succ\xe8s de Java au moment de son apparition. Java a attir\xe9 l\u2019attention des programmeurs toujours grace \xe0 son portabilit\xe9. Rappellez-vous que le code en Java est compil\xe9 en tant que bytecode. On pouvait donc \xe9crire des applets en Java et les ex\xe9cuter dans le navigateur en utilisant la machine virtuelle de Java (JVM). On a commenc\xe9 \xe0 utiliser WASM de la m\xeame mani\xe8re, mais \xe0 un niveau plus avanc\xe9."})}),"\n",(0,i.jsx)(n.h2,{id:"wat-vs-wasm",children:"WAT vs WASM"}),"\n",(0,i.jsx)(n.p,{children:"Comme on a d\xe9j\xe0 dit, WASM est un format binaire. C\u2019est-\xe0-dire, pour \xe9crire directement du WASM, il faut \xe9crire seulement des nombres, ce qui est vraiment dificile \xe0 faire et on peut faire des erreurs assez facilement. Si on veut une mani\xe8re plus proche des langage d\u2019assamblage usuels, on peut utiliser le format WAT (Web Assembly Text)."}),"\n",(0,i.jsxs)(n.p,{children:["Ce format contient des mots cl\xe9s qu\u2019on peut lire et comprendre. Ensuite, il faut transformer ce fichier du format WAT en format WASM en utilisant un outil sp\xe9cial (par exemple, ",(0,i.jsx)(n.a,{href:"https://github.com/WebAssembly/wabt",children:"wat2wasm"}),"). On obtient toujours un fichier binaire WASM mais, cette fois-ci, il ne s\u2019agit pas du code dans un langage de programmation qu\u2019on a compil\xe9, mais directement du web assembly sous la forme texte."]}),"\n",(0,i.jsxs)(n.p,{children:["Ouvrez ce ",(0,i.jsx)(n.a,{href:"https://webassembly.github.io/wabt/demo/wat2wasm/",children:"site"}),". Vous obtiendriez la page suivante:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Wat2wasmDemo",src:s(5568).A+"",width:"2852",height:"1488"})}),"\n",(0,i.jsx)(n.p,{children:"Dans la partie gauche on voit le code \xe9crite dans la forme WAT et, \xe0 la droite, dans WASM. Observez les diff\xe9rences. Ne vous concentrez pas sur ce qu\u2019il fait pour ce moment. Observez seulement qu\u2019on peut identifier et comprendre les instructions pour le format WAT."}),"\n",(0,i.jsx)(n.h2,{id:"structure-et-instructions",children:"Structure et instructions"}),"\n",(0,i.jsx)(n.h3,{id:"modules",children:"Modules"}),"\n",(0,i.jsx)(n.p,{children:"Le code en WebAssembly est organis\xe9 dans des modules. Un module contient un ensemble d\u2019instructions, d\xe9finitions et appels des fonctions. Pendant notre travail avec WASM, on utilisera un seul module. La d\xe9claration d\u2019un module se fait de la mani\xe8re suivante:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"(module)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.p,{children:"Pour ce TP, on va utiliser les types num\xe9riques:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"i32"})}),(0,i.jsx)(n.td,{children:"nombre entier sur 32 bits"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"i64"})}),(0,i.jsx)(n.td,{children:"nombre entier sur 64 bits"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"f32"})}),(0,i.jsx)(n.td,{children:"nombre avec virgule flotante sur 32 bits"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"f64"})}),(0,i.jsx)(n.td,{children:"nombre avec virgule flotante sur 64 bits"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.p,{children:"Pour les variables, comme dans les programmes usuelles, on peut les d\xe9clarer et ensuite acc\xe9der \xe0 et changer leur valeur."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"(module\n  (func $main\n    (local $var i32) ;; create a local variable named $var\n    (local.set $var (i32.const 10)) ;; set $var to 10\n    local.get $var ;; load $var onto the stack\n  )\n  (start $main)\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ajouter-des-valeurs-\xe0-la-pile",children:"Ajouter des valeurs \xe0 la pile"}),"\n",(0,i.jsxs)(n.p,{children:["On a d\xe9j\xe0 vu, dans l\u2019exemple pr\xe9c\xe9dent, comment ajouter des variables sur la pile, en utilisant ",(0,i.jsx)(n.code,{children:"local.get $<nom_de_la_variable>"})]}),"\n",(0,i.jsx)(n.p,{children:"Pour les valeurs, l\u2019instruction pour l\u2019ajout a la forme suivante:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"<nom_du_type>.const <valeur>\n\n//Exemple\n(module\n  (func $main\n    ;; load `10` and `3` onto the stack\n    i32.const 10\n    i32.const 3\n  )\n  (start $main)\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Vous trouverez toutes les instructions avec des variables ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Variables",children:"ici"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"op\xe9rations-arithm\xe9tiques",children:"Op\xe9rations arithm\xe9tiques"}),"\n",(0,i.jsx)(n.p,{children:"On peut aussi faire des op\xe9rations arithm\xe9tiques avec les variables. Sachant que WASM fonctionne sur le mod\xe8le de machine avec une pile (donc, sans r\xe9gistres), il faut mettre les op\xe9randes sur la pile et ensuite appeller l\u2019op\xe9ration."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"(module\n  (func $main\n    ;; load `10` and `3` onto the stack\n    i32.const 10\n    i32.const 3\n\n    i32.add ;; add up both numbers\n  )\n  (start $main)\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Vous trouverez toutes les op\xe9rations possibles sur les nombres enti\xe8res ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Numeric",children:"ici"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"contr\xf4le-du-flux",children:"Contr\xf4le du flux"}),"\n",(0,i.jsxs)(n.p,{children:["L\u2019instruction ",(0,i.jsx)(n.code,{children:"if"})," prend la premi\xe8re valeur de la pile. Si elle est ",(0,i.jsx)(n.code,{children:"1"}),", on ex\xe9cute les instructions associ\xe9es. On peut ajouter aussi l\u2019instruction ",(0,i.jsx)(n.code,{children:"else"}),", les instructions duquel sont ex\xe9cut\xe9es si la valeur est ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"(module\n  (func\n    i32.const 0 ;; change to positive number (true) if you want to run the if block\n    (if\n      (then\n        ;;instructions pour le cas vrai\n      )\n      (else\n        ;;instructions pour le cas faux\n      )\n    )\n  )\n  (start 1) ;; run the first function automatically\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour les boucles, on utilise deux instructions: ",(0,i.jsx)(n.code,{children:"block"})," et ",(0,i.jsx)(n.code,{children:"loop"}),", chacune ayant une instruction ",(0,i.jsx)(n.code,{children:"end"})," et une instruction ",(0,i.jsx)(n.code,{children:"br"})," associ\xe9es. La diff\xe9rence entre les deux est la suivante: ",(0,i.jsx)(n.code,{children:"br"})," \xe0 l\u2019int\xe9rieur d\u2019un ",(0,i.jsx)(n.code,{children:"loop"})," saute vers le commencement du ",(0,i.jsx)(n.code,{children:"loop"})," et ",(0,i.jsx)(n.code,{children:"br"})," \xe0 l\u2019int\xe9rieur d\u2019un ",(0,i.jsx)(n.code,{children:"block"})," saute vers la fin du ",(0,i.jsx)(n.code,{children:"block"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"i32.const 1\nlocal.set $i\nblock $endfor\n  loop $for\n    local.get $i\n    i32.const 120\n    i32.gt\n    br_if $endfor\n    local.get $i\n    call $print \n    local.get $i\n    i32.const 1\n    i32.add\n    local.set $i\n    br $for\n  end $for\nend $endfor\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Vous pouvez voir toutes les instructions de contr\xf4le du flux ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow",children:"ici"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"fonctions",children:"Fonctions"}),"\n",(0,i.jsx)(n.p,{children:"La d\xe9finition d\u2019une fonction a la syntaxe suivante:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"( func <signature> <variables_locales> <corps> )\n\n;;Exemple: fonction qui prend un seul param\xe8tre p et renvoie deux fois sa valeur en faisant la somme entre p et lui-m\xeame.\n(func (param $p i32)\n  (result i32)\n  local.get $p\n  local.get $p\n  i32.add)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"importer-des-fonctions",children:"Importer des fonctions"}),"\n",(0,i.jsxs)(n.p,{children:["Une fonctionnalit\xe9 importante des modules WASM est leur capacit\xe9 d\u2019importer et exporter des fonctions. C\u2019est-\xe0-dire, dans notre module WASM, on peut utiliser des fonctions ext\xe8rnes, qu\u2019on ne pourrait pas avoir autrement (par exemple, \xe9crire vers la console de ",(0,i.jsx)(n.code,{children:"JavaScript"})," en utilisant ",(0,i.jsx)(n.code,{children:"console.log()"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-wasm",children:"(module\n  ;; import the browser console object, you'll need to pass this in from JavaScript\n  (import \"console\" \"log\" (func $log (param i32)))\n\n  (func\n    i32.const 0 ;; change to positive number (true) if you want to run the if block\n    (if\n      (then\n        i32.const 1\n        call $log ;; should log '1'\n      )\n      (else\n        i32.const 0\n        call $log ;; should log '0'\n      )\n    )\n  )\n\n  (start 1) ;; run the first function automatically\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Dans cet exemple, observez l\u2019instruction ",(0,i.jsx)(n.code,{children:"import"}),", qui importe la fonction ",(0,i.jsx)(n.code,{children:"$log"}),". Cette fonction prend comme param\xe8tre un nombre entier sur 32 bits."]}),"\n",(0,i.jsx)(n.h2,{id:"exercices",children:"Exercices"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Pour les exercices d\u2019aujourd\u2019hui, on utilisera ",(0,i.jsx)(n.a,{href:"https://github.com/alexandruradovici/was",children:"was"}),", un outil d\xe9j\xe0 prepar\xe9 pour vous, qui importe beaucoup de fonctions que vous pouvez utiliser."]})}),"\n",(0,i.jsxs)(n.ol,{start:"0",children:["\n",(0,i.jsxs)(n.li,{children:["Lisez le ",(0,i.jsx)(n.code,{children:"README"})," du projet ",(0,i.jsx)(n.a,{href:"https://github.com/alexandruradovici/was",children:"was"}),". Regardez comment l\u2019utiliser (les sections ",(0,i.jsx)(n.code,{children:"Assemble"})," et ",(0,i.jsx)(n.code,{children:"Run"}),") et quelles sont les fonctions que vous pouvez int\xe9grer dans vos programmes (la section ",(0,i.jsx)(n.code,{children:"Libraries"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Ecrivez dans le fichier ",(0,i.jsx)(n.code,{children:"ex1.wat"})," un programme qui calcule de l'expression ",(0,i.jsx)(n.code,{children:"5-4*2/(1+3)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Ecrivez dans le fichier ",(0,i.jsx)(n.code,{children:"ex2.wat"})," un programme qui initialise 3 variables locales avec les valeurs 4, 5 et 6 dans la fonction ",(0,i.jsx)(n.code,{children:"start"})," et calcule le r\xe9sultat de l'expr\xe9ssion ",(0,i.jsx)(n.code,{children:"a+b%c"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["\xc9crivez dans le fichier ",(0,i.jsx)(n.code,{children:"ex3.wat"})," un programme qui lit une cha\xeene de caract\xe8res du clavier et affiche son longueur. Importez et utilisez les fonctions ",(0,i.jsx)(n.code,{children:"readstr"})," et ",(0,i.jsx)(n.code,{children:"writeint"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["\xc9crivez dans le fichier ",(0,i.jsx)(n.code,{children:"ex4.wat"})," un programme qui affiche votre nom vers la sortie. Utilisez la fonction ",(0,i.jsx)(n.code,{children:"writestr"}),". Vous pouvez aussi regarder un exemple ",(0,i.jsx)(n.a,{href:"https://github.com/alexandruradovici/was/blob/master/example/write_string.wat",children:"ici"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Ecrivez dans le fichier ",(0,i.jsx)(n.code,{children:"ex5.wat"})," un programme qui affiche sur l'\xe9cran le cube de chaque nombre de l'intervalle ",(0,i.jsx)(n.code,{children:"[1, 10]"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Ecrivez dans le fichier ",(0,i.jsx)(n.code,{children:"ex6.wat"})," une fonction qui v\xe9rifie si un nombre re\xe7u comme param\xe8tre est premier et affichez un message. Appelez cette fonction dans la fonction ",(0,i.jsx)(n.code,{children:"start"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);